import QuizModel from '../models/quizModel.js';
import cloudinary from '../config/cloudinary.js';

// üß† –®–∏–Ω—ç —Ç–µ—Å—Ç “Ø“Ø—Å–≥—ç—Ö
export const createQuiz = async (req, res) => {
  try {
    const { title, summary, questions } = req.body;
    const doctorId = req.userId || req.doctorId;

    if (!title || !summary || !req.file || !questions) {
      return res.status(400).json({
        success: false,
        message: "–ì–∞—Ä—á–∏–≥, —Ç–∞–π–ª–±–∞—Ä, –∑—É—Ä–∞–≥ –±–æ–ª–æ–Ω –∞—Å—É—É–ª—Ç—É—É–¥—ã–≥ –æ—Ä—É—É–ª–Ω–∞ —É—É.",
      });
    }

    // üñº Cloudinary –∑—É—Ä–∞–≥ upload
    const uploadedImage = await cloudinary.uploader.upload(req.file.path);

    // üì¶ multipart form-–∞–∞—Å –∏—Ä—Å—ç–Ω –∞—Å—É—É–ª—Ç—ã–≥ parse —Ö–∏–π–Ω—ç
    const parsedQuestions = JSON.parse(questions);

    // ‚úÖ –ê—Å—É—É–ª—Ç –±“Ø—Ä–∏–π–Ω type, option-—É—É–¥—ã–≥ —à–∞–ª–≥–∞–∂ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∂—É—É–ª–∞—Ö
    const validatedQuestions = parsedQuestions.map((q) => ({
      question: q.question,
      type: q.type === 'checkbox' ? 'checkbox' : 'radio',
      options: q.options.map((opt) => ({
        label: opt.label,
        value: typeof opt.value === 'number' ? opt.value : 0,
      })),
    }));

    const newQuiz = new QuizModel({
      title,
      summary,
      image: uploadedImage.secure_url,
      doctor: doctorId,
      questions: validatedQuestions,
    });

    await newQuiz.save();

    return res.status(201).json({
      success: true,
      quiz: newQuiz,
    });
  } catch (err) {
    console.error("‚ùå –¢–µ—Å—Ç “Ø“Ø—Å–≥—ç—Ö “Ø–µ–¥ –∞–ª–¥–∞–∞:", err);
    return res.status(500).json({
      success: false,
      message: "–¢–µ—Å—Ç “Ø“Ø—Å–≥—ç—Ö—ç–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞",
      error: err.message,
    });
  }
};

// ü©∫ –≠–º—á–∏–π–Ω –æ—Ä—É—É–ª—Å–∞–Ω —Ç–µ—Å—Ç“Ø“Ø–¥–∏–π–≥ –∞–≤–∞—Ö
export const getDoctorQuizzes = async (req, res) => {
  try {
    const doctorId = req.userId || req.doctorId;
    const quizzes = await QuizModel.find({ doctor: doctorId }).sort({ createdAt: -1 });
    return res.json({ success: true, quizzes });
  } catch (err) {
    console.error("‚ùå –¢–µ—Å—Ç –∞–≤–∞—Ö–∞–¥ –∞–ª–¥–∞–∞:", err);
    return res.status(500).json({ success: false, message: "–¢–µ—Å—Ç –∞—á–∞–∞–ª–ª–∞—Ö–∞–¥ –∞–ª–¥–∞–∞", error: err.message });
  }
};

// ‚ùå –¢–µ—Å—Ç —É—Å—Ç–≥–∞—Ö
export const deleteQuiz = async (req, res) => {
  try {
    await QuizModel.findByIdAndDelete(req.params.id);
    return res.json({ success: true });
  } catch (err) {
    console.error("‚ùå –¢–µ—Å—Ç —É—Å—Ç–≥–∞—Ö “Ø–µ–¥ –∞–ª–¥–∞–∞:", err);
    return res.status(500).json({ success: false, message: "–£—Å—Ç–≥–∞—Ö “Ø–µ–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞", error: err.message });
  }
};

// üìã –ë“Ø—Ö —Ç–µ—Å—Ç“Ø“Ø–¥ –∞–≤–∞—Ö (populate —Ö–∏–π—Å—ç–Ω —Ö—É–≤–∏–ª–±–∞—Ä)
export const getAllQuizzes = async (req, res) => {
  try {
    const quizzes = await QuizModel.find()
      .sort({ createdAt: -1 })
      .populate('doctor', 'name speciality'); // ‚úÖ –≠–Ω–¥ —ç–º—á–∏–π–Ω –Ω—ç—Ä, –º—ç—Ä–≥—ç–∂–ª–∏–π–≥ populate —Ö–∏–π–≤
    return res.json({ success: true, quizzes });
  } catch (err) {
    console.error("‚ùå –ë“Ø—Ö —Ç–µ—Å—Ç –∞—á–∞–∞–ª–ª–∞—Ö “Ø–µ–¥ –∞–ª–¥–∞–∞:", err);
    return res.status(500).json({ success: false, message: "–ë“Ø—Ö —Ç–µ—Å—Ç –∞—á–∞–∞–ª–ª–∞—Ö–∞–¥ –∞–ª–¥–∞–∞", error: err.message });
  }
};

// üìÑ ID-—Ä —Ç–µ—Å—Ç –∞–≤–∞—Ö
export const getQuizById = async (req, res) => {
  try {
    const quiz = await QuizModel.findById(req.params.id).populate('doctor', 'name speciality');
    if (!quiz) {
      return res.status(404).json({ success: false, message: "–¢–µ—Å—Ç –æ–ª–¥—Å–æ–Ω–≥“Ø–π" });
    }
    return res.json({ success: true, quiz });
  } catch (err) {
    console.error("‚ùå –¢–µ—Å—Ç –∞—á–∞–∞–ª–ª–∞—Ö “Ø–µ–¥ –∞–ª–¥–∞–∞:", err);
    return res.status(500).json({ success: false, message: "–¢–µ—Å—Ç –∞—á–∞–∞–ª–ª–∞—Ö–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞", error: err.message });
  }
};
