import QuizModel from '../models/quizModel.js';
import QuizResult from '../models/quizResultModel.js';

// ‚úÖ –¢–µ—Å—Ç –±”©–≥–ª”©–∂ —Ö–∞–¥–≥–∞–ª–∞—Ö
export const saveQuizResult = async (req, res) => {
  try {
    const { quizId, answers, userId } = req.body;

    const quiz = await QuizModel.findById(quizId);
    if (!quiz) {
      return res.status(404).json({ success: false, message: '–¢–µ—Å—Ç –æ–ª–¥—Å–æ–Ω–≥“Ø–π' });
    }

    let totalScore = 0;

    quiz.questions.forEach((question, index) => {
      const userAnswer = answers.find((a) => a.index === index);
      if (!userAnswer) return;

      if (question.type === 'radio') {
        if (userAnswer.label === '–¢–∏–π–º') totalScore += 1;
      }

      if (question.type === 'checkbox') {
        userAnswer.label.forEach((label) => {
          if (label === '–¢–∏–π–º') totalScore += 1;
        });
      }
    });

    // ‚úÖ “Æ–Ω—ç–ª–≥—ç—ç–Ω–∏–π —Ç“Ø–≤—à–∏–Ω
    let level = '–•—ç–≤–∏–π–Ω —Å—ç—Ç–≥—ç–ª–∑“Ø–π–Ω –±–∞–π–¥–∞–ª';
    if (totalScore >= 3 && totalScore <= 5) level = '–•”©–Ω–≥”©–Ω –∑—ç—Ä–≥–∏–π–Ω —Å—ç—Ç–≥—ç–ª –≥—É—Ç—Ä–∞–ª—ã–Ω —à–∏–Ω–∂—Ç—ç–π';
    if (totalScore >= 6 && totalScore <= 8) level = '–î—É–Ω–¥ –∑—ç—Ä–≥–∏–π–Ω —Å—ç—Ç–≥—ç–ª –≥—É—Ç—Ä–∞–ª';
    if (totalScore >= 9) level = '–•“Ø–Ω–¥ –∑—ç—Ä–≥–∏–π–Ω —Å—ç—Ç–≥—ç–ª –≥—É—Ç—Ä–∞–ª, —ç–º—á–∏–¥ —Ö–∞–Ω–¥–∞—Ö —à–∞–∞—Ä–¥–ª–∞–≥–∞—Ç–∞–π';

    // ‚úÖ –°–∞–Ω–∞–º—Å–∞—Ä–≥“Ø–π –∑”©–≤–ª”©–≥”©”©
    const advices = [
      "–ß–∏ –≥–∞–Ω—Ü–∞–∞—Ä–∞–∞ –±–∏—à. –•—ç–Ω –Ω—ç–≥—ç–Ω “Ø—Ä–≥—ç–ª–∂ —á–∞–º–¥ —Å–∞–Ω–∞–∞ —Ç–∞–≤—å–∂ –±–∞–π–≥–∞–∞.",
      "–ß–∏ —é—É –º—ç–¥—ç—Ä—á –±–∞–π–≥–∞–∞–≥–∞–∞ –º—ç–¥—Ä—ç—Ö —ç—Ä—Ö—Ç—ç–π. –ß–∏ —Ö–∞–Ω–≥–∞–ª—Ç—Ç–∞–π “Ø–Ω—ç —Ü—ç–Ω—ç—Ç—ç–π —Ö“Ø–Ω.",
      "–ë“Ø—Ö –∑“Ø–π–ª –æ–¥–æ–æ —Ö—ç—Ü“Ø“Ø –±–∞–π–∂ –±–æ–ª–æ—Ö —á —ç–Ω—ç “Ø–µ ”©–Ω–≥”©—Ä–Ω”©.",
      "–ê–º—å–¥—Ä–∞–ª–¥ –∞–º—Ä–∞–ª—Ç –∞–≤–∞—Ö “Ø–µ —Ö—ç—Ä—ç–≥—Ç—ç–π. –ß–∏ –∞–º—Å—Ö–∏–π–∂ –±–æ–ª–Ω–æ.",
      "–ê–ª—Ö–∞–º –±“Ø—Ä —á–∞–º–∞–π–≥ —É—Ä–∞–≥—à–ª—É—É–ª–∂ –±–∞–π–≥–∞–∞. –•—ç–¥–∏–π –∞–∞–∂—É—É —á –≥—ç—Å—ç–Ω.",
      "–¢”©–≥—Å –±–∞–π—Ö –∞–ª–±–∞–≥“Ø–π. –ß–∏ ”©”©—Ä–∏–π–Ω—Ö”©”©—Ä”©”© –ª —Å–∞–π—Ö–∞–Ω.",
      "–•“Ø—á—Ç—ç–π —Ö“Ø–Ω —É–π–ª–∂ —á–∞–¥–¥–∞–≥. –ß–∞–º–¥ —Å—ç—Ç–≥—ç–ª –±–∏–π –≥—ç–¥–≥–∏–π–Ω —à–∏–Ω–∂.",
      "–ß–∏ ”©–Ω–≥”©—Ä—Å–Ω–∏–π–≥ –±–∏—à, –∏—Ä—ç—ç–¥“Ø–π–≥ ”©”©—Ä—á–∏–ª–∂ —á–∞–¥–Ω–∞.",
      "”®–Ω”©”©–¥”©—Ä –∞–º–∞—Ä—Ö–∞–Ω –±–∏—à –±–∞–π–∂ –±–æ–ª–æ—Ö —á —á–∏ ”©–Ω–≥”©—Ä—Å”©–Ω –±“Ø—Ö–Ω–∏–π–≥ –¥–∞–≤–∂ –≥–∞—Ä—Å–∞–Ω —Ö“Ø–Ω.",
      "–ù–∞–¥–∞–¥ –∏—Ç–≥—ç, —á–∏ —á–∞–¥–Ω–∞. –ß–∏ –∞–ª—å —Ö—ç–¥–∏–π–Ω –æ–ª–æ–Ω –¥–∞–≤–∞–∞–≥ –¥–∞–≤—Å–∞–Ω."
    ];

    const randomAdvice = advices[Math.floor(Math.random() * advices.length)];

    const result = new QuizResult({
      quizId,
      userId,
      score: totalScore,
      level,
      advice: randomAdvice,
      createdAt: new Date(),
    });

    await result.save();

    return res.status(201).json({
      success: true,
      message: '–¢–µ—Å—Ç —Ö–∞–¥–≥–∞–ª–∞–≥–¥–ª–∞–∞.',
      result,
    });
  } catch (err) {
    console.error('‚ùå –•–∞—Ä–∏—É —Ö–∞–¥–≥–∞–ª–∞—Ö –∞–ª–¥–∞–∞:', err);
    return res.status(500).json({ success: false, message: '–°–µ—Ä–≤–µ—Ä–∏–π–Ω –∞–ª–¥–∞–∞.', error: err.message });
  }
};

// ‚úÖ –ë“Ø—Ö —Ç–µ—Å—Ç–∏–π–Ω “Ø—Ä –¥“Ø–Ω
export const getAllResults = async (req, res) => {
  try {
    const results = await QuizResult.find().populate('userId', 'name email');
    return res.json({ success: true, results });
  } catch (err) {
    return res.status(500).json({ success: false, message: '–£–Ω—à–∏—Ö “Ø–µ–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞.' });
  }
};

// ‚úÖ 2. 7 —Ö–æ–Ω–æ–≥ / —Å–∞—Ä–¥ –±”©–≥–ª”©—Å”©–Ω —Ç–µ—Å—Ç“Ø“Ø–¥–∏–π–Ω —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫
export const getQuizStats = async (req, res) => {
  try {
    const now = new Date();
    const weekAgo = new Date(now);
    weekAgo.setDate(now.getDate() - 7);

    const monthAgo = new Date(now);
    monthAgo.setMonth(now.getMonth() - 1);

    const weekly = await QuizResult.aggregate([
      { $match: { createdAt: { $gte: weekAgo } } },
      {
        $group: {
          _id: { $dateToString: { format: '%Y-%m-%d', date: '$createdAt' } },
          count: { $sum: 1 },
          avgScore: { $avg: '$score' },
        },
      },
      { $sort: { _id: 1 } },
    ]);

    const monthly = await QuizResult.aggregate([
      { $match: { createdAt: { $gte: monthAgo } } },
      {
        $group: {
          _id: { $dateToString: { format: '%Y-%m-%d', date: '$createdAt' } },
          count: { $sum: 1 },
          avgScore: { $avg: '$score' },
        },
      },
      { $sort: { _id: 1 } },
    ]);

    res.json({ success: true, weekly, monthly });
  } catch (err) {
    console.error('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫ –∞–≤–∞—Ö –∞–ª–¥–∞–∞:', err);
    res.status(500).json({ success: false, message: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫ –∞–≤–∞—Ö “Ø–µ–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞' });
  }
};

// ‚úÖ 3. –¢–µ—Å—Ç–∏–π–Ω “Ø—Ä –¥“Ø–Ω–≥–∏–π–Ω —Ç–æ–π–º
export const getQuizOverview = async (req, res) => {
  try {
    const topQuiz = await QuizResult.aggregate([
      {
        $group: {
          _id: '$quizId',
          count: { $sum: 1 },
          avgScore: { $avg: '$score' },
        },
      },
      { $sort: { count: -1 } },
      { $limit: 5 },
    ]);

    const populated = await QuizModel.populate(topQuiz, { path: '_id', select: 'title' });

    res.json({ success: true, overview: populated });
  } catch (err) {
    console.error('üìä –¢–æ–π–º –∞–≤–∞—Ö –∞–ª–¥–∞–∞:', err);
    res.status(500).json({ success: false, message: '–¢–µ—Å—Ç–∏–π–Ω —Ç–æ–π–º –∞–≤–∞—Ö “Ø–µ–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞' });
  }
};
