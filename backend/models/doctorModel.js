import mongoose from "mongoose";

const addressSchema = new mongoose.Schema({
  line1: { type: String, required: true }, // –∂–∏—à—ç—ç –Ω—å: –ë–ó–î, 26-—Ä —Ö–æ—Ä–æ–æ
  line2: { type: String, required: true }  // –∂–∏—à—ç—ç –Ω—å: –£–ª–∞–∞–Ω–±–∞–∞—Ç–∞—Ä, –ú–æ–Ω–≥–æ–ª
}, { _id: false });

const doctorSchema = new mongoose.Schema({
  name: { type: String, required: true },
  email: { type: String, required: true, unique: true },
  password: { type: String, required: true },
  image: { type: String, required: true },
  speciality: { type: String, required: true },     // –ñ–∏—à—ç—ç –Ω—å: –°—ç—Ç–≥—ç–ª –∑“Ø–π—á
  degree: { type: String, required: true },         // –ñ–∏—à—ç—ç –Ω—å: PhD, MA
  experience: { type: String, required: true },     // –ñ–∏—à—ç—ç –Ω—å: 5 –∂–∏–ª
  about: { type: String, required: true },          // –¢–∞–Ω–∏–ª—Ü—É—É–ª–≥–∞
  available: { type: Boolean, default: true },
  fees: { type: Number, required: true },
  slots_booked: {
    type: Map,
    of: [String],     // ['10:00 AM', '11:00 AM']
    default: {}
  },
  address: { type: addressSchema, required: true },
  date: { type: Date, default: Date.now },

  // üÜï –ù—ç–º—ç–ª—Ç“Ø“Ø–¥
  rating: { type: Number, default: 0 },             // –î—É–Ω–¥–∞–∂ “Ø–Ω—ç–ª–≥—ç—ç
  reviews: [
    {
      userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },
      comment: String,
      stars: Number,
      createdAt: { type: Date, default: Date.now }
    }
  ]
}, { minimize: false });

const doctorModel = mongoose.models.Doctor || mongoose.model("Doctor", doctorSchema);
export default doctorModel;
